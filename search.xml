<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>测试文章1</title>
      <link href="/2025/01/06/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A01/"/>
      <url>/2025/01/06/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A01/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>&#x2F;&#x2F;首页文章展示缩略图<br><img src="https://cdn.jsdelivr.net/gh/Pennicc/imag-repostioty@main/misc/086740dfb7d1d9ee.jpg" alt="111" style="width:100%" />  </p><p>0x00 前言</p><span id="more"></span><h2 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h2><h2 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h2><h2 id="0x03"><a href="#0x03" class="headerlink" title="0x03"></a>0x03</h2><h2 id="0x04"><a href="#0x04" class="headerlink" title="0x04"></a>0x04</h2><hr />版权信息]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>helloword</title>
      <link href="/2025/01/06/helloword/"/>
      <url>/2025/01/06/helloword/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="1-6-模块"><a href="#1-6-模块" class="headerlink" title="1.6 模块"></a>1.6 模块</h1><p>我们已经学习了如何在你的程序中定义一次函数而重用代码。如果你想要在其他程序中重用很多函数，那么你该如何编写程序呢？你可能已经猜到了，答案是使用模块。模块基本上就是一个包含了所有你定义的函数和变量的文件。为了在其他程序中重用模块，模块的文件名必须以.py为扩展名。</p><p>模块可以从其他程序 导入以便利用它的功能。这也是我们使用Python标准库的方法。首先，我们将学习如何使用标准库模块。</p><p>先创建module.py文件用于练习和测试。</p><p>1.6.1 调用SYS模块</p><p>添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: UTF-8 -*-</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;The command line arguments are:&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> sys.argv:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n\nThe PYTHONPATH is&#x27;</span>, sys.path, <span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们利用import语句导入sys模块。sys模块包含了与Python解释器和它的环境有关的函数。当Python执行import sys语句的时候，它在sys.path变量中所列目录中寻找sys.py模块。如果找到了这个文件，这个模块的主块中的语句将被运行，然后这个模块将能够被你使用。注意，初始化过程仅在我们第一次输入模块的时候进行。</p><blockquote><p>sys.argv变量是一个字符串的列表，包含了命令行参数的列表。</p></blockquote><blockquote><p>sys.path包含输入模块的目录名列表。我们可以观察到sys.path的第一个字符串是空的——这个空的字符串表示当前目录也是sys.path的一部分，这与PYTHONPATH环境变量是相同的。这意味着你可以直接输入位于当前目录的模块。否则，你得把你的模块放在sys.path所列的目录之一。</p></blockquote><p>我们从终端使用python来运行，并输入参数“测试参数”，结果如下图所示：</p><p><img src="/img/1.png"></p><h2 id="1-6-2-FROM-IMPORT语句"><a href="#1-6-2-FROM-IMPORT语句" class="headerlink" title="1.6.2 FROM..IMPORT语句"></a>1.6.2 FROM..IMPORT语句</h2><p>上面的示例中我们通过sys.argv的方式来获取argv变量中的内容，那如果我们想直接调用argv，就可以获取变量内容或进行方法调用，该如何做呢？可以使用<b> from sys import argv </b>语句。还有一种更简单的方法<b> from sys import * </b>导入sys模块中所有可用的变量或方法。</p><p>一般说来，应该避免使用from..import而使用import语句，因为这样可以使你的程序更加易读，也可以避免名称的冲突。</p><h2 id="1-6-3-NAME"><a href="#1-6-3-NAME" class="headerlink" title="1.6.3 NAME"></a>1.6.3 <strong>NAME</strong></h2><p>每个模块都有一个名称，在模块中可以通过语句来找出模块的名称。前面说过，当一个模块被第一次导入的时候，这个模块的主块将被运行。假如我们只想在程序本身被使用的时候运行主块，而在它被别的模块输入的时候不运行主块，我们该怎么做呢？这可以通过模块的__name__属性完成。测试如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前代码被单独运行&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;当前代码被导入运行&#x27;</span>)</span><br></pre></td></tr></table></figure><p>每个Python模块都有它的__name__，如果它是’<strong>main</strong>‘，这说明这个模块被用户单独运行，我们可以进行相应的恰当操作。运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">当前代码被单独运行</span><br></pre></td></tr></table></figure><h2 id="1-6-4-创建模块"><a href="#1-6-4-创建模块" class="headerlink" title="1.6.4 创建模块"></a>1.6.4 创建模块</h2><p>创建你自己的模块是十分简单的，你一直在这样做！每个以.py结尾的文件都是一个模块。下面我们先创建一个myModule.py的文件，内容如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">sayhi</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Hi, this is mymodule speaking.&#x27;</span>)</span><br><span class="line">version = <span class="string">&#x27;0.1&#x27;</span></span><br></pre></td></tr></table></figure><p>从上面的代码可以看到，它与我们普通的Python程序相比并没有什么特别之处。我们接下来将看看如何在我们别的Python程序中使用这个模块。这个模块应该被放置在我们导入它的程序的同一个目录中，或者在sys.path所列目录之一。测试代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> myModule</span><br><span class="line"> </span><br><span class="line">myModule.sayhi()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Version&#x27;</span>, myModule.version)</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Hi, this is newmodule speaking.</span><br><span class="line">Version 0.1</span><br></pre></td></tr></table></figure><h2 id="1-6-5-DIR-函数"><a href="#1-6-5-DIR-函数" class="headerlink" title="1.6.5 DIR()函数"></a>1.6.5 DIR()函数</h2><p>我们可以使用内建的dir函数来列出模块定义的标识符。标识符有函数、类和变量。当为dir()提供一个模块名的时候，它返回模块定义的名称列表。如果不提供参数，它返回当前模块中定义的名称列表。先看下面的代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(sys))</span><br><span class="line">a=<span class="number">5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>())</span><br><span class="line"><span class="keyword">del</span> a</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>())</span><br></pre></td></tr></table></figure><p>首先，我们来看一下在导入的sys模块上使用dir。我们看到它包含一个庞大的属性列表。如下图：</p><p><img src="/img/2.png"></p><p>接下来，我们不给dir函数传递参数，默认地，它返回当前模块的属性列表。<br>为了观察dir的作用，我们定义一个新的变量a并且给它赋一个值，然后检验dir，我们观察到在列表中增加了以上相同的值。我们使用del语句删除当前模块中的变量&#x2F;属性，这个变化再一次反映在dir的输出中。对比如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;__builtins__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;a&#x27;, &#x27;i&#x27;, &#x27;myModule&#x27;, &#x27;sys&#x27;]</span><br><span class="line">[&#x27;__builtins__&#x27;, &#x27;__doc__&#x27;, &#x27;__file__&#x27;, &#x27;__loader__&#x27;, &#x27;__name__&#x27;, &#x27;__package__&#x27;, &#x27;__spec__&#x27;, &#x27;i&#x27;, &#x27;myModule&#x27;, &#x27;sys&#x27;]</span><br></pre></td></tr></table></figure><h2 id="1-6-6-小结"><a href="#1-6-6-小结" class="headerlink" title="1.6.6 小结"></a>1.6.6 小结</h2><p>模块的用处在于它能为你在别的程序中重用它提供的服务和功能。Python附带的标准库就是这样一组模块的例子。我们已经学习了如何使用这些模块以及如何创造我们自己的模块。</p><p>本节的练习题如下：</p><ol><li>实现一个模块，提供基本的加、减、乘、除方法，在另一个文件中引入该模块，调用方法进行测试。</li></ol><p>下一节我们学习异常处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 111 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
